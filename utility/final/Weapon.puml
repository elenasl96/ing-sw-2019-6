@startuml
class Weapon{
    - id: int
    - name: String
    - effectsDescription: String
    - status: WeaponStatus
    - cardEffectList: List<CardEffect>
    __
    + initializeWeapon(int): Weapon
}

Weapon <- WeaponStatus
Weapon <-- CardEffect

enum EffectType{
    BASIC
    OPTIONAL
    OPTIONAL1
    OPTIONAL2
    ALTERNATIVE
    BEFORE_AFTER_BASIC
    OPTIONAL_VORTEX
    BEFORE_BASIC
    EVERY_TIME
}

enum WeaponStatus{
    UNLOADED
    PARTIALLY_LOADED
    LOADED
}
interface Move{
__
void execute()
}

class CardEffect{
    - expired: boolean
    - effectType: EffectType
    - effects: List<Effect>
    - cost: List<Ammo>
    - description: String
    __
    + doesDamage: boolean
}

CardEffect <- EffectType
CardEffect <-- Ammo
CardEffect <-- Effect
abstract Effect{
    - targets: List<Target>
    - optionality: Boolean
    __
    + askForInput(): void
    + getFieldsToFill(): String
    + setFieldsToFill(Player, String[], int, int): int
    + fillFields(int): void
    - getPreviousEffect(int): Effect
    + isFilled(): boolean
    + doesDamage(): boolean
}

class DamageEffect{
    damages: int
}
class MarkEffect{
    marks: int
}
class MovementEffect{
    - destination: Square
    - coordinate: Coordinate
    - reachList: List<Square>
    - maxSteps: int
    __

}

Move <..Effect
Effect <.. DamageEffect
Effect <.. MovementEffect
Effect <.. MarkEffect


abstract Target{
    canSee: Boolean
    cardinal: Boolean
    minDistance: int
    maxDistance: int
}

Target <.. Player
Target <.. Square
Target <.. Room

Effect "1...n" *-- Target
@enduml