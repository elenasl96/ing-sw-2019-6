@startuml
package model{
    package decks{
        class AmmoDeck{
            - ammoTiles: List<AmmoTile>
            - discard: List<AmmoTile>
            __
            - shuffleDeck(): void
            + pickCard(): AmmoTile
            + discardCard(AmmoTile): void
        }

        abstract class AmmoTile <@see>

        class CardEffect{
            - effectType: EffectType
            - effects: List<Effect>
            - cost: Ammo
        }

        interface Grabbable{
            + pickGrabbable(int, int): void
        }

        class Powerup{
            - name: String
            - ammo: Ammo
            - moves: List<Move>
        }

        class PowerupDeck{
            - powerups: List<Powerup>
            - discard: List<Powerup>
            __
            - shuffleDeck(): void
            + pickCard(): Powerup
        }

        class Weapon{
            - name: String
            - effectsDescription: String
            - status: WeaponStatus
            - cardEffect: List<CardEffect>
            __
            + isLoaded(): boolean
        }

        class WeaponDeck{
            - weapons: List<Weapon>
        }

        class WeaponTile implements Grabbable{
            - weapons: List<Weapon>
        }

        AmmoDeck "2" *-- AmmoTile
        PowerupDeck *-- Powerup
        WeaponDeck *-- Weapon
    }

    package field{
        class AmmoSquare extends Square{
            - ammo: AmmoTile
        }

        class Coordinate {
            - x: char
            - y: int
        }

        class Edge{
            - sq1: Square
            - sq2: Square
        }

        class Field{
            - edges: List<Edge>
            - squares: List<Square>
            - spawnSquares: List<SpawnSquare>
            - rooms: List<Room>
            __
            + generateField(int): void
            + addSpawnSquare(SpawnSquare): void
        }

        class Room{
            - color: Color
            - squares: List<Square>
        }

        class SpawnSquare extends Square{
            - weapons: WeaponTile
        }

        class Square{
            - color: Color
            - coord: Coordinate
            __
            + getGrabbable(): Grabbable
            + setGrabbable(Board): void
            + addGrabbable(Weapon, int): void
        }

        Edge "2" *-- Square
        Field <-- Edge
        Field <-- Square
        Field <-- Room
    }

    package moves{
        class DamageEffect extends Effect{
            - damage: int
        }

        abstract Effect implements Move{
            - optionality: Boolean
            # targets: List<Target>
            __
            + {abstract} getFieldsToFill(): String
            + {abstract} fillField(String[], int): void
        }

        interface Move{
            execute(Player, int): Response
        }

        class MoveAndGrab implements Move{
            - movement: Movement
            - grab: Grab
        }

        class Movement extends Effect{
            - coordinate: Coordinate
            - destination: Square
            - reachList: List<Square>
            - maxSteps: int
            - maxStepsFrenzy: int
            __
            - createReachList(int, Square): void
        }

        class Pay implements Move{
            - ammos: List<Ammo>
        }

        class Run implements Move{
            - movement: Movement
        }

        abstract Target{
            - targetType: TargetType
            - minDistance: Integer
            - maxDistance: Integer
            __
            + Target(TargetType, Integer, Integer)
            + addDamages(Player, int, int): void
            + {abstract} receiveUpdate(Update): void
            + {abstract} getFieldsToFill(): String;
            + {abstract} canBeSeen(Player, int): boolean;
            + {abstract} setFieldsToFill(String, int): Target;
            + {abstract} getCurrentPosition(): Square;
            + {abstract} findRealTarget(String, int): Target;
            + {abstract} sameAsMe(int): boolean;
        }

        Effect "1...n" *-- Target
        MoveAndGrab <-- Movement
        MoveAndGrab <-- Grab
        Run <-- Movement
    }

    package room{
        class Group{
            - {static} uniqueGroupID: int
            - groupID: int
            - groupName: String
            - users: List<User>
            - listeners: List<ModelObserver>
            - full: boolean
            - fieldNumber: int
            - skullNumber: int
            __
            + Group(int, int)
            + {static} resetGroupID(): void
            + sendUpdate(Update): void
            + join(User): void
            + leave(User): void
            + observe(ModelObserver): void
            - checkUserInGroup(User): void
            + createGame(): void
            + characterIsTaken(Character): Boolean
            + sendStartNotification(): void
        }

        Group <-- User
        Group <-- ModelObserver

        interface ModelObserver {
            + onJoin(User): void
            + onLeave(User): void
            + onStart(): void
            + onUpdate(Update): void
        }

        class Update{
            - playerChanges: boolean
            - player: Player
            - string: String
            - move: String
            - data: String
            __
            + Update(Player, boolean)
            + Update(Player)
            + Update(String)
            + Update(String, String)
        }

        Update <-- Player

        class User {
            - username: String
            - updateObservers: List<ModelObserver>
            - {static} uniqueGroupID: int
            - userID: int
            - player: Player
            - character: Character
            __
            + User(String)
            + listenToMessages(ModelObserver): void
            + receiveUpdate(Update): void
        }

        User <-- Player
    }

    class Ammo{
        - color: Color
        __
        + cloneAmmo(): Ammo
    }

    class Board{
        - field: Field
        - killshotTrack: List<Player>
        - weaponsLeft: WeaponDeck
        - ammosLeft: AmmoDeck
        - powerupsLeft: PowerupDeck
        __
        +addKillshot(Player): void
    }

    Board <-- Player
    Board <-- WeaponDeck
    Board <-- AmmoDeck
    Board <-- PowerupDeck

    class Game{
        - numberPlayers: int
        - board: Board
        - players: PlayerList
        - currentPlayer: Player
        - observers: List<ModelObserver>
        - skullsNumber: int
        - done: boolean
        - finalFrenzy: boolean
        __
        + setGame(int, int, List<User>): void
        + sendUpdate(Update): void
    }

    Game <-- ModelObserver
    Game <-- Player
    Game <-- PlayerList

    class GameContext  << (S,#FF7700) Singleton >> {
        - {static} instance: GameContext
        - games: List<Game>
        + {static} get(): GameContext
        + reset(): void
    }

    GameContext <-- Game

    class Player {

    }

    class PlayerBoard{

    }

    class PlayerList {

    }

    CardEffect "1...n" *-- Effect
    CardEffect o-- Ammo

    Powerup "1" *-- Ammo
    Powerup "1...n" *-- Move

    Weapon "1...n" *-- CardEffect

    Target <|-- Room
    Target <|-- Square
    AmmoSquare "1" *-- AmmoTile
    SpawnSquare "1" *-- WeaponTile

    Movement <-- Square
    Movement <-- Coordinate

    Pay <-- Ammo

    package enums{
        enum Character{
            NOT_ASSIGNED
            PG1
            PG2
            PG3
            PG4
            PG5
        }
        enum Color{
            NONE
            GREY
            YELLOW
            RED
            BLUE
            GREEN
            WHITE
            PURPLE
        }
        enum EffectType {
            BASIC
            OPTIONAL
            OPTIONAL1
            OPTIONAL2
            ALTERNATIVE
            BEFORE_AFTER_BASIC
            OPTIONAL_VORTEX
            BEFORE_BASIC
            EVERY_TIME
        }
        enum Phase{
            WAIT
            FIRST
            SECOND
            RELOAD
            SPAWN
        }
        enum TargetType{
            NONE
            VISIBLE
            NOT_VISIBLE
            BASIC_VISIBLE
            OPTIONAL1_VISIBLE
            CARDINAL
            ME
            NOT_MINE
            SAME_TARGET
            ALL
            SAME_DIRECTION
            DIFFERENT_SQUARE
        }
        enum WeaponStatus{
            UNLOADED
            PARTIALLY_LOADED
            LOADED
        }
    }

    package exception{
        class InvalidMoveException <@see> extends RuntimeException
    }
}
@enduml