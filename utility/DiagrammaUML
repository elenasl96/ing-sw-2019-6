@startuml
 skinparam classAttributeIconSize 0

 Player "1" *-- PlayerBoard
 class Player{
     - name: String
     - id: int
     - character: Character
     - currentPosition: int[2]
     ''- phase: int
     - ammo<AmmoCard>: List
     - powerup<PowerupCard>: List
     - weapon<WeaponCard>: List
     - points: int
     - motto: String
     - adrenalineLevel: int
     - pilaPunti: int
     - firstPlayer: boolean
     - dead: boolean
     - shootable<Player>: List
     __
     + getAll()
     + setAll()
 }


  Game "3...5" - Player
  class Game{

  }

 Board "1" - Game
 Board "4...6" o-- Room
 Board "1" *-- KillshotTrack: include
 Board "1...2" *---- AmmoDeck: includes
 Board "1...2" *---- PowerupDeck: includes
 Board "1...1" *---- WeaponDeck: includes
 class Board{
    - playersNumber: int
    - field: char[5][7]
    '- skullsNumber: int
    '- killshotTrack: int[]
    '- weaponsLeft: int[]
    '- ammosLeft: int[]
    '- ammosLeftover: int[]
    '- powerupsLeft: int[]
    '- powerupsLeftover: int[]
    '- r: Random
    __
    + getAll()
    + setAll()
 }





 class KillshotTrack{

 }

 class PlayerBoard{
    - damage<Player>: List[12]
    - marks<Player>: List[12]
    - deaths: int
    __
    + setAll()
    + getALl()
 }

 AmmoTiles <|-- AmmoTilesWithAmmo
 AmmoTiles "2" *-- Ammo: made of
 AmmoTiles <|-- AmmoTilesWithPowerup
 abstract AmmoTiles{
    - ammo1: Ammo
    - ammo2: Ammo
 }

 AmmoTilesWithAmmo "1" *-- Ammo: made of
 class AmmoTilesWithAmmo{
    - ammo3: Ammo
 }

 'Ammo "1" *-- Color: has
 class Ammo{
    - color: Color
 }

 class AmmoTilesWithPowerup{
 }


 enum Color{
    BLU
    GIALLO
    ROSSO
    WHITE
    GREEN
    PURPLE
 }



 WeaponDeck "21" *-- WeaponCard: composed by
 class WeaponDeck{

 }

 PowerupDeck "24" *-- PowerupCard: composed by
 class PowerupDeck{

 }

 AmmoDeck "36" *-- AmmoTiles: composed by
 class AmmoDeck<AmmoCard>{

 }

 PowerupCard "1" *--- Ammo: made of
 class PowerupCard{
    - name: String
    - ammo: Ammo
    - effectDescription: String
 }

 WeaponCard "1...3" *-- Ammo: made of
 'WeaponCard "1" *- WeaponStatus: has
 class WeaponCard{
    - name: String
    - ammo<Ammo>: List
    - effectsDescription: String
    - status: WeaponStatus
 }

 enum WeaponStatus{
     LOADED
     PARTIALLY_LOADED
     UNLOADED
 }

 Room "1...4" *-- Square: composed by
 'Room "1" *-- Color
 class Room{
    - color: Color
 }

 Square <|-- SpawnSquare
 Square <|-- AmmoSquare
 abstract Square{

 }

 AmmoSquare "1" *-- AmmoTiles
 class AmmoSquare{

 }

 SpawnSquare "1" *-- WeaponCard


@enduml







 newpage
@startuml *MVC Diagram
    skinparam classAttributeIconSize 0
    class Client{
    }
    class model{
    }
    class ViewGiocatore{
        /' Cliccando sugli altri giocatori si vedranno le loro plance
         e la loro pila di points'/
        - name: String
        - personaggio: Personaggio
        - playerBoard: Plancia
        - weapon: Armi[3]
        - powerup: Potenziamenti[3]
        - ammo: Munizioni[9] /'3 per tipo'/
        - pilaPunti: int
        __
        /' Nessun metodo set: non posso modificare le plance
         degli altri'/
        + showView(): void
    }

    class ViewTabellone{
        - points: int /'I points del giocatore'/
        - field: char[5][7]
       /'In GUI in teoria sarebbe tutto integrato,
       perÃ² magari per la CLI conviene mettere altre matrici
       per indicare le carte munizioni presenti sul field'/

       - armiGiallo: Armi[3]
       - armiBlu: Armi[3]
       - armiRosso: Armi[3]
       - killshotTrack: int[NumeroTeschi]
       - pilaPuntiAvversari: int[4]
        __
        + setPunti(int): void
        + showPunti(): void
    }

    class Controller{

    }

    ViewTabellone "1" *-- Client
    ViewGiocatore "0...5" o-- Client
    Controller <--> ViewTabellone
    Controller <--> ViewGiocatore
    model <--> Controller

@enduml