@startuml
 skinparam classAttributeIconSize 0
 class Board{
    - playersNumber: int
    - field: char[5][7]
    - skullsNumber: int
    - killshotTrack: int[]
    - weaponsLeft: int[]
    - ammosLeft: int[]
    - ammosLeftover: int[]
    - powerupsLeft: int[]
    - powerupsLeftover: int[]
    - r: Random
    __
    + getAll()
    + setAll()
 }

 class Player{
     - name: String
     - id: int
     - character: Character
     - currentPosition: int[2]
     - phase: int
     - ammo: int[3]
     - powerup: int[3]
     - weapon: int[3]
     - playerBoard: Plancia
     - points: int
     - motto: String
     - adrenalineLevel: int
     - pilaPunti: int
     - firstPlayer: boolean
     - dead: boolean
     - shootable: boolean[]
     __
     + getAll()
     + setAll()
 }

 class Plancia{
    - danni: int[12]
    - marchi: int[12]
    - morti: int
    __
    + setAll()
    + getALl()
 }

 Player "1" *-- Plancia
 Board "3...5" o-- Player
@enduml
 newpage
newpage
@startuml *MVC Diagram
    skinparam classAttributeIconSize 0
    class Client{
    }
    class model{
    }
    class ViewGiocatore{
        /' Cliccando sugli altri giocatori si vedranno le loro plance
         e la loro pila di points'/
        - name: String
        - personaggio: Personaggio
        - playerBoard: Plancia
        - weapon: Armi[3]
        - powerup: Potenziamenti[3]
        - ammo: Munizioni[9] /'3 per tipo'/
        - pilaPunti: int
        __
        /' Nessun metodo set: non posso modificare le plance
         degli altri'/
        + showView(): void
    }

    class ViewTabellone{
        - points: int /'I points del giocatore'/
        - field: char[5][7]
       /'In GUI in teoria sarebbe tutto integrato,
       per√≤ magari per la CLI conviene mettere altre matrici
       per indicare le carte munizioni presenti sul field'/

       - armiGiallo: Armi[3]
       - armiBlu: Armi[3]
       - armiRosso: Armi[3]
       - killshotTrack: int[NumeroTeschi]
       - pilaPuntiAvversari: int[4]
        __
        + setPunti(int): void
        + showPunti(): void
    }

    class Controller{

    }

    ViewTabellone "1" *-- Client
    ViewGiocatore "0...5" o-- Client
    Controller <--> ViewTabellone
    Controller <--> ViewGiocatore
    model <--> Controller

@enduml