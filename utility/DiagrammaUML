@startuml
 skinparam classAttributeIconSize 0

 package enums{
 enum Character{
    :D-STRUCT-OR
    BANSHEE
    DOZER
    VIOLET
    SPROG
 }
  enum Color{
     BLUE
     YELLOW
     RED
     WHITE
     GREEN
     PURPLE
     GREY
  }
 enum WeaponStatus{
     LOADED
     PARTIALLY_LOADED
     UNLOADED
 }

 }

 Player "1" *- PlayerBoard
 class Player{
     - name: String
     - id: int
     - character: Character
     - currentPosition: Square
     - phase: int
     - ammo: List<Ammo>
     - powerup: List<Powerup>
     - weapon: List<Weapon>
     - points: int
     - motto: String
     - adrenalineLevel: int
     - stackPoint: int
     - firstPlayer: boolean
     - dead: boolean
     - shootable<Player>: List
     __
     + getAll()
     + setAll()
 }

  Game "3...5" - Player
  class Game{
    - numberPlayers: int
    - board: Board
    - players<Player>: List
    - phase: int
  }

 Board "1" - Game
 class Board {/' << (S,#FF7700) Singleton >>'/
    - field: char[5][7]
    '- skullsNumber: int
    - field: List<List<Room>>
    - killshotTrack<Player>: List
    - weaponsLeft: WeaponDeck
    - ammosLeft: AmmoDeck
    - ammosLeftover: AmmoDeck
    - powerupsLeft: PowerupDeck
    - powerupsLeftover: PowerupDeck
    '- r: Random
    __
    + getAll()
    + setAll()
 }


  package decks{
  AmmoDeck "36" *-- AmmoTiles: composed by
  Player "0..9" o-- Ammo
  Player "0..3" o----- Weapon
  Player "0..3" o-- Powerup
  Board "1...2" *---- AmmoDeck: includes
  Board "1...2" *---- PowerupDeck: includes
  Board "1...1" *---- WeaponDeck: includes
  AmmoTiles <|-- AmmoTilesWithAmmo
  AmmoTiles "2" *-- Ammo: made of
  AmmoTiles <|-- AmmoTilesWithPowerup
  }

package GameField{
 Room "1...4" *-- Square: composed by
 Board "4...6" o-- Room
 Square <|-- SpawnSquare
 Square <|-- AmmoSquare

}

 class PlayerBoard{
    - damage: List<Player>
    - marks: List<Player>
    - deaths: int
    __
    + setAll()
    + getAll()
 }

  WeaponDeck "21" *--- Weapon: composed by
  class WeaponDeck{
    - weapons: List<Weapon>
  }

  PowerupDeck "24" *-- Powerup: composed by
  class PowerupDeck{
    - powerups: List<Powerup>
  }


  class AmmoDeck{
    - ammos:List<AmmoTiles>
  }


 abstract AmmoTiles{
    - ammos: List<Ammo>
 }

 AmmoTilesWithAmmo "1" *-- Ammo: made of
 class AmmoTilesWithAmmo{
    - ammo3: Ammo
 }

 'Ammo "1" *-- Color: has
 class Ammo{
    - color: Color
 }

 class AmmoTilesWithPowerup{
 }


 Powerup "1" *--- Ammo: made of
 class Powerup{
    - name: String
    - ammo: Ammo
    - effectDescription: String
 }

 Weapon "1...3" *-- Ammo: made of
 'Weapon "1" *- WeaponStatus: has
 class Weapon{
    - name: String
    - ammo<Ammo>: List
    - effectsDescription: String
    - status: WeaponStatus
 }


 'Room "1" *-- Color
 class Room{
    - color: Color
    - squares<Square>: List
 }

 abstract Square{
    - color: Color
    - adjacentList: List<Square>
 }

 AmmoSquare "1" *-- AmmoTiles
 class AmmoSquare{
 }

 SpawnSquare "3" *-- Weapon

@enduml







newpage
@startuml
 interface Observable <<Interface>>
    Observable <|.. Model
    Observable <|.. View
 interface Observer <<Interface>>
    Observer <|.. Controller
    Observer <|.. View
 Model <-- View: Observes
 Controller <-- View: Observes
 Controller -> Model: Update
@enduml





 newpage
@startuml *MVC Diagram
    skinparam classAttributeIconSize 0
package Client    {
    class RealPlayer{
    __
    + sendData()
    }
}
package Model{
    class GameModel{
        - modelState<>
        __

    }
}
package View {
    class ViewPlayer{
        - name: String
        - personaggio: Personaggio
        - playerBoard: Plancia
        - weapon: List<Weapon>
        - powerup: List<Powerup>
        - ammo: List<Ammo>
        - stackPoint: int
        __
        + showView(): void
    }
    class ViewBoard{
       - points: int
       - field: List<List<Room>>
       - yellowWeaponPoint: List<Weapon>
       - blueWeaponPoint: List<Weapon>
       - redWeaponPoint: List<Weapon>
       - killshotTrack: int[skullNumber]
       - stackPoint: int[4]
        __
       + showPoints(): void
    }
}

package Controller{
    class GameController{
        - game: Game
        __
        + move(Player): void
        + grab(Player): void
        + shoot(Player, Player): void
        + mark(Player, Player): void
        + overkill(Player, Player): void
        + setPhase(Player): void
        + recharge(Player): void
        + respawnPlayer(Player): void
        + update(Model): void

    }
}

interface Observable <<Interface>>
    Observable <|.. Model
    Observable <|.. View
interface Observer <<Interface>>
    Observer <|.. Controller
    Observer <|.. View

    ViewBoard "1" *-- Client
    ViewPlayer "0...5" o-- Client
    GameController -> View: observes
    GameModel <-- View: observes
    GameController <- GameModel: update



@enduml




newpage
@start